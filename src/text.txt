import React, { useState, useEffect } from 'react';
import { db, collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from '../../firebase';

const Dashboard = () => {
  // State for form inputs
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [age, setAge] = useState('');
  const [fatherName, setFatherName] = useState('');
  const [students, setStudents] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  // Load students when component mounts
  useEffect(() => {
    fetchStudents();
  }, []);

  // Fetch all students from Firestore
  const fetchStudents = async () => {
    try {
      setLoading(true);
      const querySnapshot = await getDocs(collection(db, 'students'));
      const studentData = [];
      
      querySnapshot.forEach((doc) => {
        studentData.push({ id: doc.id, ...doc.data() });
      });

      setStudents(studentData);
    } catch (err) {
      setError('Failed to fetch students');
    } finally {
      setLoading(false);
    }
  };

  // Add a new student
  const addStudent = async (e) => {
    e.preventDefault();
    
    // Check if email already exists
    const emailExists = students.some(student => student.email === email);
    if (emailExists) {
      setError('A student with this email already exists');
      return;
    }

    try {
      setLoading(true);
      setError('');
      
      await addDoc(collection(db, 'students'), {
        name,
        email,
        age: Number(age),
        fatherName,
        attendance: {}, // Object to store attendance dates
        createdAt: new Date()
      });

      // Clear form and refresh list
      setName('');
      setEmail('');
      setAge('');
      setFatherName('');
      await fetchStudents();
    } catch (err) {
      setError('Failed to add student');
    } finally {
      setLoading(false);
    }
  };

  // Delete a student
  const deleteStudent = async (studentId) => {
    try {
      setLoading(true);
      await deleteDoc(doc(db, 'students', studentId));
      await fetchStudents();
    } catch (err) {
      setError('Failed to delete student');
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="dashboard">
      <h1>Student Attendance System</h1>
      
      {/* Add Student Form */}
      <form onSubmit={addStudent} className="student-form">
        <h2>Add New Student</h2>
        
        {error && <p className="error">{error}</p>}
        
        <div className="form-group">
          <label>Name:</label>
          <input 
            type="text" 
            value={name} 
            onChange={(e) => setName(e.target.value)} 
            required 
          />
        </div>
        
        <div className="form-group">
          <label>Email:</label>
          <input 
            type="email" 
            value={email} 
            onChange={(e) => setEmail(e.target.value)} 
            required 
          />
        </div>
        
        <div className="form-group">
          <label>Age:</label>
          <input 
            type="number" 
            value={age} 
            onChange={(e) => setAge(e.target.value)} 
            required 
            min="5"
            max="25"
          />
        </div>
        
        <div className="form-group">
          <label>Father's Name:</label>
          <input 
            type="text" 
            value={fatherName} 
            onChange={(e) => setFatherName(e.target.value)} 
            required 
          />
        </div>
        
        <button type="submit" disabled={loading}>
          {loading ? 'Adding...' : 'Add Student'}
        </button>
      </form>
      
      {/* Students List */}
      <div className="students-list">
        <h2>Student Records</h2>
        
        {loading && students.length === 0 ? (
          <p>Loading students...</p>
        ) : students.length === 0 ? (
          <p>No students found</p>
        ) : (
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Age</th>
                <th>Father's Name</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {students.map((student) => (
                <tr key={student.id}>
                  <td>{student.name}</td>
                  <td>{student.email}</td>
                  <td>{student.age}</td>
                  <td>{student.fatherName}</td>
                  <td>
                    <button 
                      onClick={() => deleteStudent(student.id)}
                      disabled={loading}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default Dashboard;